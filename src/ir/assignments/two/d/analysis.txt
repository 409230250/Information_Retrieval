Please place your analysis of the runtime complexity of your palindrome algorithm in this file.


private static List<Frequency> computePalindromeFrequencies(ArrayList<String> words) {
     
      List<Frequency> answer = new ArrayList<Frequency>();								// O(1)
      Map<String, Integer> Palindrome = new HashMap<String, Integer>();							// O(1)					
	  
      for (int i=0; i<words.size(); i++){										// O(n)
         String goingToCheck = "";											// O(1)
         for (int j=i; j<words.size(); j++) {										// O(n)
            goingToCheck += " "+words.get(j);										// O(1)	
            goingToCheck = goingToCheck.trim();  									// O(1)
            if (istPalindrom(goingToCheck)){										// O(m)
               int currentText = Palindrome.containsKey(goingToCheck) ? Palindrome.get(goingToCheck) : 0;		// O(1)
               Palindrome.put(goingToCheck, currentText+1);								// O(1)
            }
         }
      }
      
      for (String k : Palindrome.keySet()){										// O(n)		
         Frequency f = new Frequency(k, Palindrome.get(k));								// O(1)
         answer.add(f);													// O(1)
      }
      
      PalindromeFrequencyComparator comparator = new PalindromeFrequencyComparator();					// O(1)
      Collections.sort(answer, comparator);										// O(n log n)
      
		return answer;												// O(1)
}


Total complexity:
	[O(1)+O(1)] + [O(n) * [O(1)+O(n)] * [O(1)+O(1)+O(m)+O(1)+O(1)]] + [O(n)*[O(1)+O(1)]] + [O(1)+O(n log n)] + O(1)
  = O(1) + [O(n) * O(n) * O(m)] + O(n) + O(n log n) + O(1)
  = O(n^2) * O(m) + O(n log n)
  = O(n^2) * O(m)
  = O(m * n^2)
  Note: n is the size of the input arraylist (n=words.size()), 
	m is the size of the words inside the arraylist. 
  
Thus, the total complexity of my palindrome algorithm is O(m * n^2). 

  
